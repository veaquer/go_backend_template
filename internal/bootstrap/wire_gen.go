// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/veaquer/go_backend_template/internal/auth/token"
	"github.com/veaquer/go_backend_template/internal/config"
	"github.com/veaquer/go_backend_template/internal/db"
	"github.com/veaquer/go_backend_template/internal/logger"
	"github.com/veaquer/go_backend_template/internal/user/handler"
	"github.com/veaquer/go_backend_template/internal/user/repository"
	service2 "github.com/veaquer/go_backend_template/internal/user/service"
	repository2 "github.com/veaquer/go_backend_template/internal/verification/repository"
	"github.com/veaquer/go_backend_template/internal/verification/service"
	"github.com/veaquer/go_backend_template/pkg/email"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func NewApp() (*App, error) {
	zapLogger := logger.New()
	configConfig := config.Load(zapLogger)
	gormDB, err := db.ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(gormDB)
	verificationRepository := repository2.NewVerificationRepository(gormDB)
	goMailSender := email.NewGoMailSender(configConfig)
	verificationService := service.NewVerificationService(verificationRepository, goMailSender, configConfig)
	tokenManager := token.NewTokenManager(configConfig)
	redisCache := ProvideRedis(configConfig)
	userService := service2.NewUserService(userRepository, zapLogger, verificationService, tokenManager, redisCache)
	userHandler := handler.NewUserHandler(userService, verificationService)
	engine := ProvideRouter(userHandler, tokenManager)
	app := &App{
		Router: engine,
		Logger: zapLogger,
		DB:     gormDB,
	}
	return app, nil
}

// wire.go:

type App struct {
	Router *gin.Engine
	Logger *zap.Logger
	DB     *gorm.DB
}

var providers = wire.NewSet(
	ProvideRedis,
	ProvideRouter, db.ProvideDB,
)

var repositories = wire.NewSet(repository.NewUserRepository, repository2.NewVerificationRepository)

var services = wire.NewSet(service2.NewUserService, service.NewVerificationService)

var handlers = wire.NewSet(handler.NewUserHandler)
