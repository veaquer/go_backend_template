services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-go_backend_template}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-go_backend_template}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redisdata:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
  backend:
    build:
      context: .
      dockerfile: build/Dockerfile.prod
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-4000}:${PORT:-4000}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      # Application Environment
      ENV: ${ENV:-production}
      PORT: ${PORT:-4000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:4000}
      
      # Database Configuration
      DSN: "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-go_backend_template}?sslmode=disable&timezone=UTC"
      
      # Redis Configuration
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      REDIS_DB: ${REDIS_DB:-0}
      
      # JWT Configuration
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-change_this_in_production_access_secret_256_bits}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change_this_in_production_refresh_secret_256_bits}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION:-15m}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-168h}
      
      # Email Configuration
      EMAIL_FROM: ${EMAIL_FROM:-noreply@localhost}
      EMAIL_HOST: ${EMAIL_HOST:-localhost}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASS: ${EMAIL_PASS:-}
      
      # Additional Production Settings
      LOG_LEVEL: ${LOG_LEVEL:-info}
      GIN_MODE: ${GIN_MODE:-release}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
    
    # Add debugging tools to the container
    command: |
      sh -c "
        echo 'Backend starting...'
        echo 'Environment variables:'
        env | grep -E '(ENV|PORT|DSN|REDIS|JWT)' | sort
        echo 'Starting backend application...'
        ./backend
      "
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  backend-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local
